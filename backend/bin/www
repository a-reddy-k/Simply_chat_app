#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require("../app");
var debug = require("debug")("backend:server");
var http = require("http");
const socketIo = require("socket.io");
const { connectDB } = require("../db");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server;
connectDB().then(() => {
  // console.log("here");
  server = http.createServer(app);

  const io = socketIo(server, {
    cors: {
      origin: "http://127.0.0.1:3000",
      methods: ["GET", "POST"],
    },
  });

  io.on("connection", (socket) => {
    console.log(`socket ${socket.id} connected`);

    // Listen for send message event

    socket.on("join-room", (room) => {
      socket.join(room);
      // var users = io.sockets.adapter.rooms;
      // console.log(users);
      // console.log(`joined room ${room}`);
    });
    socket.on("exit-room", (room) => {
      socket.leave(room);
      // var users = io.sockets.adapter.rooms;
      // console.log(users);
      // console.log(`exited room ${room}`);
    });

    socket.on("chat message", (room, msg) => {
      // console.log(`Message in room ${room}: ${msg}`);
      io.to(room).emit("chat message", msg);
    });

    // Handle disconnection
    socket.on("disconnect", (reason) => {
      console.log(`socket ${socket.id} disconnected due to ${reason}`);
    });
  });

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

// const io = require("socket.io")(server, {
//   pingTimeout: 60000,
//   cors: {
//     origin: "http://127.0.0.1:3000",
//   },
// });

// io.on("connectiom", (socket) => {
//   console.log("connected to socket.io");
// });

// In your server-side code (app.js or wherever your server logic resides)
// const io = require("socket.io")(server);

// Listen for connection events from clients
